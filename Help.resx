<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Pentru înregistrarea conturilor în situație se vor urma următorii pași:

1) Se va apasa butonul CONTABILITATE din form-ul principal.

2) Se vor introduce datele referitoare la contul analizat ( număr cont,
 tip cont, perioada analizată și soldul inițial ).

3) Se vor introduce și înregistra în mod repetat, de câte ori este nevoie, 
datele referitoare la intrările și ieșirile din contul analizat ( număr cont, 
suma înregistrată și tipul tranzacției ) . În cazul unei greșeli se va apăsa
butonul GOLIRE LISTE și se vor repopula listele cu date. 

Listele cu intrările și ieșirile din contul analizat, împreună cu datele 
aferente calculate pentru analiza contabilă ( rulaj debitor / creditor,
sold final debitor sau creditor, după caz ) sunt actualizate LIVE o dată
cu înregistrarea sau ștergerea operațiunilor de intrare / ieșire. 

4) După ce s-au populat listele de intrări / ieșiri cu datele necesare,
se va apăsa butonul ÎNREGISTREAZĂ CONT ÎN SITUAȚIE, care va 
adăuga analiza contului respectiv la registrul contabil (listă).

5) Pentru a vizualiza registrul contabil, se va apăsa butonul SITUAȚIE
CONTABILĂ, iar mai apoi, în noua fereastră deschisă butonul 
AFIȘEAZĂ SITUAȚIE. 
</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>În form-ul Inregistrare, în meniul principal, la secți-
unea VIEW, prin butonul AFIȘARE ÎNREGISTRARE
se va genera o afișare grafică conform principiilor
DUBLEI ÎNREGISTRĂRI al înregistrării curente. 

Există opțiunea de a salva afișarea în format
bitmap.</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Aplicația creată facilitează crearea și înregistrarea situației conturilor
dintr-o firmă, evidențiind intrările și ieșirile din fiecare cont, analizate
pe o anumită perioadă de timp, respectând normele contabile. </value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Atât înregistrările individuale, cât și situația contabilă
per total pot fi salvate și preluate atât în format text, 
cât și în format binar . 

Situația contabilă poate fi salvată, pentru o eventuală
printare, în format bitmap ( în secțiunea FILE a me-
niului principal al form-ului Situatie ).</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>O dată cu adăugarea diferitelor înregistrări în situație,
pentru actualizarea afișarii situației și a datelor globale
despre aceasta ( total SFD, total SFC), este necesară
apăsarea butonului REFRESH sau retastarea
butonului AFIȘEAZĂ SITUAȚIE  din meniul cont-
textual (opțiune disponibilă pentru toate form-urile create) .

Este disponibilă prin butonul SORTARE CONTURI și
opțiunea sortării înregistrărilor din situație pe criteriul
ordonării crescătoare a soldurilor . </value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>În arhiva aferentă proiectului sunt 
încărcate fișiere text și binare pentru
restaurarea datelor în aplicație ,atât
pentru înregistrările individuale în
situație, cât și pentru situația în sine.
(fișierele sunt denumite orientativ).</value>
  </data>
</root>